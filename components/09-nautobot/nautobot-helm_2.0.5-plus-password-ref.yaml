---
# Source: nautobot/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nautobot
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
automountServiceAccountToken: false
---
# Source: nautobot/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-redis-configuration
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: nautobot/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-redis-health
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: nautobot/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-redis-scripts
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: nautobot/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-env
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
data:
  NAUTOBOT_ALLOWED_HOSTS: "*"
  NAUTOBOT_CREATE_SUPERUSER: "true"
  NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
  NAUTOBOT_DB_HOST: "nautobot-primary.nautobot.svc"
  NAUTOBOT_DB_NAME: "nautobot"
  NAUTOBOT_DB_PORT: "5432"
  NAUTOBOT_DB_TIMEOUT: "300"
  NAUTOBOT_DB_USER: "nautobot"
  NAUTOBOT_DEBUG: "False"
  NAUTOBOT_LOG_LEVEL: "INFO"
  NAUTOBOT_METRICS_ENABLED: "True"
  NAUTOBOT_REDIS_HOST: "nautobot-redis-master"
  NAUTOBOT_REDIS_PORT: "6379"
  NAUTOBOT_REDIS_USERNAME: ""
  NAUTOBOT_REDIS_SSL: "False"
  NAUTOBOT_SUPERUSER_EMAIL: "admin@example.com"
  NAUTOBOT_SUPERUSER_NAME: "admin"
---
# Source: nautobot/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-config
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
data:

  uwsgi.ini: |
    [uwsgi]
    ; The IP address (typically localhost) and port that the WSGI process should listen on
    http = 0.0.0.0:8080
    https = 0.0.0.0:8443,/opt/nautobot/nautobot.crt,/opt/nautobot/nautobot.key


    ; Fail to start if any parameter in the configuration file isnâ€™t explicitly understood by uWSGI
    strict = true

    ; Enable master process to gracefully re-spawn and pre-fork workers
    master = true

    ; Allow Python app-generated threads to run
    enable-threads = true

    ;Try to remove all of the generated file/sockets during shutdown
    vacuum = true

    ; Do not use multiple interpreters, allowing only Nautobot to run
    single-interpreter = true

    ; Shutdown when receiving SIGTERM (default is respawn)
    die-on-term = true

    ; Prevents uWSGI from starting if it is unable load Nautobot (usually due to errors)
    need-app = true

    ; By default, uWSGI has rather verbose logging that can be noisy
    disable-logging = true

    ; Assert that critical 4xx and 5xx errors are still logged
    log-4xx = true
    log-5xx = true

    ; Enable HTTP 1.1 keepalive support
    http-keepalive = 1

    ;
    ; Advanced settings (disabled by default)
    ; Customize these for your environment if and only if you need them.
    ; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Options.html
    ;

    ; Number of uWSGI workers to spawn. This should typically be 2n+1, where n is the number of CPU cores present. Default 3 as n will be >= 1
    processes = 3

    ; Number of uWSGI threads each worker will be pre-forked into before starting
    threads = 2

    ; set the socket listen queue size, in production the suggested value is 1024, however RHEL based kernels have a max of 128 by default
    ; you may need to increase the somaxconn parameter in your kernel
    listen = 128

    ; If using subdirectory hosting e.g. example.com/nautobot, you must uncomment this line. Otherwise you'll get double paths e.g. example.com/nautobot/nautobot/.
    ; See: https://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.11.html#fixpathinfo-routing-action
    ; route-run = fixpathinfo:

    ; If hosted behind a load balancer uncomment these lines, the harakiri timeout should be greater than your load balancer timeout.
    ; Ref: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html?highlight=keepalive#http-keep-alive
    ; harakiri = 65
    ; add-header = Connection: Keep-Alive
    ; http-keepalive = 1

    ; For larger installations, certain API calls (example: Relationships, GraphQL) can have a length of query parameters that go over uWSGI default limit.
    ; Setting the buffer size to larger than default (4096) can have an impact on memory utilization, but can be set as high as the header limit of 65535.
    buffer-size = 4096
---
# Source: nautobot/templates/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nautobot-nginx-config
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
    app.kubernetes.io/component: nautobot-nginx
data:
  nautobot.conf: |-
    server {
        listen 8443 ssl http2 default_server;
        listen [::]:8443 ssl http2 default_server;

        server_name _;

        ssl_certificate /opt/nautobot_certs/nautobot.crt;
        ssl_certificate_key /opt/nautobot_certs/nautobot.key;

        client_max_body_size 25m;

        location /static/ {
            alias /opt/nautobot/static/;
        }

        location / {
            include uwsgi_params;
            uwsgi_pass  127.0.0.1:8001;
            uwsgi_param Host $host;
            uwsgi_param X-Real-IP $remote_addr;
            uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
            uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
        }
    }

    server {
        listen 8080 default_server;
        listen [::]:8080 default_server;

        server_name _;

        client_max_body_size 25m;

        location /static/ {
            alias /opt/nautobot/static/;
        }

        location / {
            include uwsgi_params;
            uwsgi_pass  127.0.0.1:8001;
            uwsgi_param Host $host;
            uwsgi_param X-Real-IP $remote_addr;
            uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
            uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
        }
    }
    server {
        listen 8002;
        location / {
            stub_status;
        }
    }
---
# Source: nautobot/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nautobot-redis-headless
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
  annotations:

spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/name: redis
---
# Source: nautobot/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nautobot-redis-master
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: nautobot/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nautobot-default
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
    app.kubernetes.io/component: nautobot-default
spec:
  type: ClusterIP
  ports:
    - protocol: "TCP"
      port: 443
      targetPort: "https"
      name: "https"
    - protocol: "TCP"
      port: 80
      targetPort: "http"
      name: "http"
  selector:
    app.kubernetes.io/name: nautobot
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/component: nautobot-default
---
# Source: nautobot/templates/celery-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nautobot-celery-beat
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
    app.kubernetes.io/component: nautobot-celery-beat
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: nautobot
      app.kubernetes.io/instance: nautobot
      app.kubernetes.io/component: nautobot-celery-beat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nautobot
        helm.sh/chart: nautobot-2.0.5
        app.kubernetes.io/instance: nautobot
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.0.5"
        app.kubernetes.io/component: nautobot-celery-beat
    spec:
      serviceAccountName: nautobot

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nautobot
                    app.kubernetes.io/name: nautobot
                    app.kubernetes.io/component: nautobot-celery-beat
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      containers:
        - name: nautobot-celery
          tty: true
          image: ghcr.io/nautobot/nautobot:2.1.1-py3.11
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsUser: 999
          command:
            - nautobot-server
            - celery
            - beat
            - --loglevel
            - $(NAUTOBOT_LOG_LEVEL)
          env:
            - name: "NAUTOBOT_K8S_COMPONENT"
              value: "nautobot-celery-beat"
            - name: NAUTOBOT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nautobot-pguser-nautobot
                  key: password
          envFrom:
            - configMapRef:
                name: nautobot-env
            - secretRef:
                name: nautobot-env
          resources:
            limits:
              cpu: 3328m
              memory: 6656M
            requests:
              cpu: 5m
              memory: 256M
          volumeMounts:
            - name: "git-repos"
              mountPath: "/opt/nautobot/git"
      terminationGracePeriodSeconds: 30
      volumes:
        - name: "git-repos"
          emptyDir: {}
---
# Source: nautobot/templates/celery-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nautobot-celery-default
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
    app.kubernetes.io/component: nautobot-celery-default
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: nautobot
      app.kubernetes.io/instance: nautobot
      app.kubernetes.io/component: nautobot-celery-default
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nautobot
        helm.sh/chart: nautobot-2.0.5
        app.kubernetes.io/instance: nautobot
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.0.5"
        app.kubernetes.io/component: nautobot-celery-default
    spec:
      serviceAccountName: nautobot

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nautobot
                    app.kubernetes.io/name: nautobot
                    app.kubernetes.io/component: nautobot-celery-default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      containers:
        - name: nautobot-celery
          tty: true
          image: ghcr.io/nautobot/nautobot:2.1.1-py3.11
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsUser: 999
          command:
            - nautobot-server
            - celery
            - worker
            - --loglevel
            - $(NAUTOBOT_LOG_LEVEL)
            - --queues
            - $(CELERY_TASK_QUEUES)
            - --events
          env:
            - name: "NAUTOBOT_K8S_COMPONENT"
              value: "nautobot-celery-default"
            - name: "CELERY_TASK_QUEUES"
              value: "default"
            - name: NAUTOBOT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nautobot-pguser-nautobot
                  key: password
          envFrom:
            - configMapRef:
                name: nautobot-env
            - secretRef:
                name: nautobot-env
          resources:
            limits:
              cpu: 3328m
              memory: 6656M
            requests:
              cpu: 400m
              memory: 1G
          volumeMounts:
            - name: "git-repos"
              mountPath: "/opt/nautobot/git"
      terminationGracePeriodSeconds: 30
      volumes:
        - name: "git-repos"
          emptyDir: {}
---
# Source: nautobot/templates/nautobot-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nautobot-default
  namespace: "nautobot"
  labels:
    app.kubernetes.io/name: nautobot
    helm.sh/chart: nautobot-2.0.5
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.0.5"
    app.kubernetes.io/component: nautobot-default
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: nautobot
      app.kubernetes.io/instance: nautobot
      app.kubernetes.io/component: nautobot-default
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nautobot
        helm.sh/chart: nautobot-2.0.5
        app.kubernetes.io/instance: nautobot
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.0.5"
        app.kubernetes.io/component: nautobot-default
    spec:
      serviceAccountName: nautobot

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nautobot
                    app.kubernetes.io/name: nautobot
                    app.kubernetes.io/component: nautobot-default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        # This init container will run post_upgrade which initializes/upgrades the DB as well as collects static files
        - name: nautobot-init
          image: ghcr.io/nautobot/nautobot:2.1.1-py3.11
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 999
            runAsUser: 999
          args:
            - "echo"
            - "Nautobot Initialization Done"
          env:
            - name: NAUTOBOT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nautobot-pguser-nautobot
                  key: password
          envFrom:
            - configMapRef:
                name: nautobot-env
            - secretRef:
                name: nautobot-env
          resources:
            limits:
              cpu: 1000m
              memory: 8704M
            requests:
              cpu: 300m
              memory: 1280M
          volumeMounts:
            - name: "nautobot-static"
              mountPath: "/opt/nautobot/static"
            - name: "git-repos"
              mountPath: "/opt/nautobot/git"
            - name: "nautobot-config"
              mountPath: "/opt/nautobot/uwsgi.ini"
              subPath: "uwsgi.ini"
      containers:
        - name: nautobot
          tty: true
          image: ghcr.io/nautobot/nautobot:2.1.1-py3.11
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 999
            runAsUser: 999
          command:
            - nautobot-server
            - start
            - --ini
            - /opt/nautobot/uwsgi.ini
          env:
            - name: "NAUTOBOT_K8S_COMPONENT"
              value: "nautobot-default"
            - name: NAUTOBOT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nautobot-pguser-nautobot
                  key: password
          envFrom:
            - configMapRef:
                name: nautobot-env
            - secretRef:
                name: nautobot-env
          resources:
            limits:
              cpu: 1000m
              memory: 8704M
            requests:
              cpu: 300m
              memory: 1280M
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/
              port: http
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/
              port: http
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: "nautobot-static"
              mountPath: "/opt/nautobot/static"
            - name: "git-repos"
              mountPath: "/opt/nautobot/git"
            - name: "nautobot-config"
              mountPath: "/opt/nautobot/uwsgi.ini"
              subPath: "uwsgi.ini"
          ports:
            - name: "https"
              containerPort: 8443
            - name: "http"
              containerPort: 8080

      terminationGracePeriodSeconds: 30
      volumes:
        - name: "nautobot-static"
          emptyDir: {}
        - name: "git-repos"
          emptyDir: {}
        - name: "nautobot-config"
          configMap:
            name: nautobot-config
---
# Source: nautobot/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nautobot-redis-master
  namespace: "nautobot"
  labels:
    app.kubernetes.io/instance: nautobot
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.9.0
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: nautobot
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: nautobot-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nautobot
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.9.0
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: e888d0f18b05c7bd70a8c6ee0ee303f66b2775fd57390463254884461a8cdf6c
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 27ae699f02090654b5f07831cdb0fbfa2dfd0aa3a232d4b0006457aaf361b679
    spec:

      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: nautobot-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nautobot
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-11-r2
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nautobot-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: nautobot-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: nautobot-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: nautobot-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: nautobot
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: nautobot/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "nautobot-default-test"
  namespace: "nautobot"
  labels:
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: "docker.io/library/busybox"
      imagePullPolicy: "Always"
      command: ['wget']
      args: ['-O', '/dev/null', 'nautobot-default.nautobot.svc:80']
      resources:
        limits:
          memory: "128Mi"
          cpu: "500m"
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 10000
        capabilities:
          drop:
            - "ALL"
  restartPolicy: Never
  securityContext:
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
