---
release_group: null

bootstrap:
  enabled: true
  ks_user: admin
  script: |
    # admin needs the admin role for the default domain
    openstack role add \
          --user="${OS_USERNAME}" \
          --domain="${OS_DEFAULT_DOMAIN}" \
          "admin"
    # create groups which will stand in for permissions since dex cannot use roles yet
    openstack group create --or-show ucadmin
    openstack group create --or-show dctech
    openstack group create --or-show user
    # TODO: only create this actually requested
    # create 'demo' user with sufficient permissions
    openstack user create --or-show --password demo --email 'demo@example.com' demo
    openstack user set --email 'demo@example.com' demo
    # add 'demo' user to 'ucadmin' group
    openstack group add user ucadmin demo
    # create 'argoworkflow' user
    # credentials for ironic-nautobot-sync and other argo workflows
    openstack project create undercloud --or-show
    openstack user create --project undercloud --password demo argoworkflow --or-show
    openstack role add --user argoworkflow --project undercloud member
    # ironic-neutron-agent user
    # TODO: investigate if we can use 'ironic' user for this.
    openstack user create --project service --domain service --password ironic-neutron-password ironic-neutron-agent --or-show
    openstack role add --domain service --user ironic-neutron-agent service
    openstack role add --project service --project-domain service --user ironic-neutron-agent --user-domain service member

    # allow ironic user to see servers in undercloud project
    openstack role add --project undercloud --user ironic --user-domain service  member
    # add 'demo' user to have 'member' role, needed for horizon dashboard use
    openstack role add --user demo --project undercloud member

network:
  # configure OpenStack Helm to use Undercloud's ingress
  # instead of expecting the ingress controller provided
  # by OpenStack Helm
  use_external_ingress_controller: true

dependencies:
  static:
    db_sync:
      jobs:
        - keystone-credential-setup
        - keystone-fernet-setup

pod:
  resources:
    enabled: false
    api:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "4096Mi"
    jobs:
      bootstrap:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      domain_manage:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      db_init:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      db_sync:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      db_drop:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      rabbit_init:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      tests:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      fernet_setup:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      fernet_rotate:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      credential_setup:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      credential_rotate:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      credential_cleanup:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
      image_repo_sync:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "4096Mi"
  probes:
    api:
      api:
        readiness:
          enabled: true
          params:
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 15
        liveness:
          enabled: true
          params:
            initialDelaySeconds: 50
            periodSeconds: 60
            timeoutSeconds: 15

conf:
  keystone:
    auth:
      methods: password,token,openid,mapped,application_credential,totp
    openid:
      remote_id_attribute: HTTP_OIDC_ISS

# typically overridden by environmental
# values, but should include all endpoints
# required by this chart
endpoints:
  oslo_messaging:
    statefulset:
      replicas: 3
      name: rabbitmq-server
    hosts:
      default: rabbitmq-nodes

manifests:
  job_credential_cleanup: false
  job_db_init: false
  job_rabbit_init: false
  pod_rally_test: false
  secret_db: false
  secret_keystone: true

# we don't want to enable OpenStack Helm's
# helm.sh/hooks because they set them as
# post-install,post-upgrade which in ArgoCD
# maps to PostSync. However the deployments
# and statefulsets in OpenStack Helm
# depend on the jobs to complete to become
# healthy. Which they cannot because they are in
# the post step and not in the main step.
# Turning this on results in the keys jobs
# editing the annotation which deletes the item
# and wipes our keys.
helm3_hook: false

annotations:
  job:
    keystone_fernet_setup:
      argocd.argoproj.io/hook: Sync
      argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    keystone_db_sync:
      argocd.argoproj.io/hook: Sync
      argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    keystone_credential_setup:
      argocd.argoproj.io/hook: Sync
      argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
